- fix pageContext._renderHook.hookFilePath / replace with new prop hookSrc
- refacor/fix skipConfigValue to differentiate between global/page virtual file

- Set env type to `{ client: boolean | 'eager', server: boolean | 'eager', config?: boolean }`
  - Eager means that the value is always loaded, no matter what page is being loaded. (By default only the values of the page being renderered are loaded.)
  - Should the option be '_eager' and internal? Is there any added value to make it internal? Custom configs are only meant for advanced use cases anyways. Maybe naming it 'eager' (instead of '_eager') while omitting 'eager` in the Meta type until some user needs it?
  - Values that are defined in `+config.h.js` are loaded at config-time even if `config: false`. (But they can be defined in a `+{configName}.js` and they won't be loaded then.)
    - But they can still be lazily loaded in the client/server runtime
  - Global page config values are always eager

- Improve https://vike.dev/header-file
- Update all examples to not use PageContextBuiltIn but Vike.PageContext instead

- improve ignoring of dist/
- client/shared/
  client/runtime-server-routing/
  client/runtime-client-routing/
  client/router.js

V1 design stable release:
 - Ensure what client-side loads is minimal
 - Implements TODO comments
 - Docs
   - pageContext.config
   - pageContext.configEntries
   - update migration examples
   - Replace boilerplates with Bati
   - Rewrite documentation to assume usage of `vike-{react,vue,solid}` (while preserving custom integration docs)

After V1 design release:
 - https://github.com/vikejs/vike/issues/1165
 - Implement vike.config.js
   - Move all globals there and add migration warnings
 - Implement data() hook
   - Update `vike-{react,vue,solid}` +tilte.js config
   - New config requestPageContextOnNavigation
     ```ts
     type requestPageContextOnNavigation =
       | true // default
       | 'minimal' // Equivalent to `{ makeHooksUniversal: true }`. (Or maybe `{ makeHooksUniversal: ['data', 'onBeforeRender'] }`?)
       | false // Equivalent to { makeHooksUniversal: true, skipPageContextInit: true }
       | {
           makeHooksUniversal: true | ('onBeforeRender' | 'data' | 'guard')[] // Change env of hooks from `{ client: false, server: true }` to `{ client: true, server: true }`
           // Is `skipPageContextInit: true` too dangerous (the user may break its app)? I think it's ok and, so far, I think a warning in the docs is enough.
           skipPageContextInit: true | string[] // e.g. ['user']
         }
     ```
     - By default, only call guard() hooks on the server-side (if requestPageContextOnNavigation.minimal isn't true)
 - Make +client.js work for all render modes
   - In order to support [github.com/vikejs/vike-react#28 - Client-side init code](https://github.com/vikejs/vike-react/issues/28)
   - Use case: ad-hoc client-side scripts such as error tracking and analytics
   - revert/adapt commit "[failed-attempt] make +client.js work for all render modes (#1209)" https://github.com/vikejs/vike/commit/64e423bd6c2cee860defc8157e7aa176d62d42e0
   - Make +client.js cumulative
     - Is a new computed config `config.clusterId: number` needed?
       - Server Routing instead of Client Routing for two pages that have a different clusterId
       - We do need this if we want to be able to "remove" +client.js scripts upon navigation, in other word in order to ensure that a +client.js doesn't leak to sibling pages
       - While a less clean implementation is possible (e.g. by not caring about leaking +client.js scripts), implementing clusterId could fairly easy while being future proof
       - clusterId is an auto-increment number that uniquely identifies following combination:
          - The list of +client.js file paths (if two pages have a different list of +client.js => they have different clusterId)
          - onRenderClient() file path (e.g. if a page uses vike-react while another page uses vike-vue => they have different onRenderClient() => they have different clusterId)
          - Maybe: allow user to assign a "cluster name" with `config.clientRouting: string`. Is this needed?
 - Check why some deps aren't discovered by Vite's depOptimizer:
   - https://github.com/brillout/vike-react-query => why does Vite discover `part-regex` only later?

Features:
 - multiple error pages
 - nested layouts

Sometime:
 - Replace "isomorphic"/"isomorph" to "universal"
 - remove documentProps from examples and boilerplates

Release 1.0.0 breaking changes:
  - `import * from 'vike'`
  - pageContext.url
  - Forbid async Route Functions

After 1.0.0 release:
 - Remove 0.4 design examples
   - Update all links to /examples/*-v1
 - Add deprecation warning for pageContext.exports

Contact:
 - Bun
 - Payload CMS
   - Other CMS-related tools like Tina CMS
 - Shopify
 - https://gadget.dev/
   - https://twitter.com/harrybrundage/status/1691760859935109125
   - https://discord.com/channels/@me/1141741825871331408
 - Deno Deploy
 - Cloudflare Workers
 - UI frameworks like qwik (maybe even Angular)
   - See `pnpm create vite@latest` for a list of UI frameworks

